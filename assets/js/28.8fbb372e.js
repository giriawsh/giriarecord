(window.webpackJsonp=window.webpackJsonp||[]).push([[28],{378:function(s,t,a){"use strict";a.r(t);var n=a(42),e=Object(n.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#前言"}},[s._v("#")]),s._v(" 前言")]),s._v(" "),a("p",[s._v("《JS权威指南》的第四章第一部分，包括原始表达式、对象数组表达式、函数定义表达式、属性访问表达式、调用表达式、对象创建表达式等内容。")]),s._v(" "),a("blockquote",[a("p",[s._v("表达式：JS解释器会将其计算出一个结果")])]),s._v(" "),a("ul",[a("li",[a("strong",[s._v("常量")]),s._v("是最简单的一类表达式。"),a("strong",[s._v("变量名")]),s._v("也是一种简单的表达式，它的值就是赋给变量的值。")]),s._v(" "),a("li",[s._v("复杂表达式是由简单表达式组成的。\n"),a("ul",[a("li",[s._v("最常用的方法是使用运算符")])])])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://giriawsh-bucket.oss-cn-beijing.aliyuncs.com/img/20200927010128.png",alt:"image-20200927010120328"}})]),s._v(" "),a("p",[s._v("今天的电脑桌面也很漂亮……顺手存一下")]),s._v(" "),a("h2",{attrs:{id:"_1-原始表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-原始表达式"}},[s._v("#")]),s._v(" 1. 原始表达式")]),s._v(" "),a("p",[a("strong",[s._v("最简单的表达式是原始表达式")]),s._v("。是表达式的最小单位（不再包含其他表达式）")]),s._v(" "),a("p",[s._v("JS中的原始表达式：")]),s._v(" "),a("ul",[a("li",[s._v("常量")]),s._v(" "),a("li",[s._v("直接量（直接在程序中出现的常数值，例如字符直接量、正则表达式直接量等）")]),s._v(" "),a("li",[s._v("部分关键字（true false this null等）\n"),a("ul",[a("li",[s._v("this并不是一个常量，在一个方法体内this返回调用这个方法的对象。")])])]),s._v(" "),a("li",[s._v("变量")])]),s._v(" "),a("h2",{attrs:{id:"_2-对象和数组的初始化表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-对象和数组的初始化表达式"}},[s._v("#")]),s._v(" 2. 对象和数组的初始化表达式")]),s._v(" "),a("blockquote",[a("p",[s._v("对象直接量、数组直接量：实际上是一个新创建的对象和数组")])]),s._v(" "),a("p",[s._v("他们不是原始表达式，因为它们所包含的成员或者元素都是子表达式（例如a[1]等）")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("数组可以嵌套，数组初始化表达式中的元素表达式也都会各自计算一次。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("var martrix = [[1,2,3],[4,5,6]];\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("也就是说，数组初始化表达式每次计算的值有可能是不同的。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://giriawsh-bucket.oss-cn-beijing.aliyuncs.com/img/20200927174852.png",alt:"image-20200927174845777"}})]),s._v(" "),a("p",[s._v("数组直接量中的列表逗号之间的元素可以省略，会自动填充undefined，结尾处可以留下单个逗号而不会填充。")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('var s = {\n\t"yes": 0,\n\t"no": 1\n}\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br")])]),a("p",[s._v("对象直接量也可以嵌套，也都会各自计算一次并且它们可以是任意JS表达式。")]),s._v(" "),a("p",[s._v("对象直接量中的属性名称可以是字符串而不是标识符。")]),s._v(" "),a("h2",{attrs:{id:"_3-函数定义表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-函数定义表达式"}},[s._v("#")]),s._v(" 3. 函数定义表达式")]),s._v(" "),a("blockquote",[a("p",[s._v("函数直接量：函数定义表达式定义为一个JS函数，表达式的值是这个新定义的函数。")])]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("f")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("x")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("函数定义表达式同样可以包含函数的名字，也可以通过函数语句来定义。")]),s._v(" "),a("h2",{attrs:{id:"_4-属性访问表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-属性访问表达式"}},[s._v("#")]),s._v(" 4. 属性访问表达式")]),s._v(" "),a("p",[s._v("属性访问表达式运算得到一个对象属性或一个数组元素的值。拥有两种语法：")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("expression.identifier\nexpression[expression]\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("第二个表达式指定要访问的属性的名称或者代表要访问数组元素的索引。")]),s._v(" "),a("p",[s._v("计算顺序：")]),s._v(" "),a("ol",[a("li",[s._v("在“.”和“[”之前的表达式总会首先计算，如果expression计算的结果是null或undefined，抛出一个类型错误异常")]),s._v(" "),a("li",[s._v("如果运算结果不是对象或者数组，JS会将其转换成对象（参照第三章JS类型转换）")]),s._v(" "),a("li",[s._v("如果跟随句点和标识符（第一种写法），会查找由这个标识符所指定的属性的值，并将其作为整个表达式的值返回")]),s._v(" "),a("li",[s._v("如果跟随方括号，会计算方括号内表达式的值"),a("strong",[s._v("并将它转换为字符串")]),s._v("。")]),s._v(" "),a("li",[s._v("如果命名的属性不存在，整个属性访问表达式的值是undefined")])]),s._v(" "),a("h3",{attrs:{id:"注意"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#注意"}},[s._v("#")]),s._v(" 注意")]),s._v(" "),a("p",[s._v("如果属性名称是一个保留字或者包含空格和标点符号，或是一个数字（对于数组来说），或当属性名是通过运算得出而不是固定的值时，则必须使用方括号的写法。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://giriawsh-bucket.oss-cn-beijing.aliyuncs.com/img/20200927180412.png",alt:"image-20200927180412330"}})]),s._v(" "),a("p",[s._v("PS:亲测浏览器调试台中保留字可以，但是看起来非常不具有语义化")]),s._v(" "),a("h2",{attrs:{id:"_5-调用表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-调用表达式"}},[s._v("#")]),s._v(" 5. 调用表达式")]),s._v(" "),a("blockquote",[a("p",[s._v("调用表达式：一种调用（或者执行）函数或方法的语法表示")])]),s._v(" "),a("p",[s._v("以一个函数表达式开始，指代了要调用的函数，跟随一对圆括号，括号内是以逗号隔开的参数列表")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token function"}},[s._v("f")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nMath"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("max")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" y"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" z"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\na"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("sort")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("p",[s._v("计算顺序：")]),s._v(" "),a("ol",[a("li",[s._v("函数表达式")]),s._v(" "),a("li",[s._v("参数表达式=>得到参数值")]),s._v(" "),a("li",[s._v("如果函数表达式不是一个可调用对象，抛出类型错误异常（所有的函数都是可调用的，即使宿主对象不是函数它也有可能被调用）")]),s._v(" "),a("li",[s._v("实参的值依次赋值给形参")]),s._v(" "),a("li",[s._v("执行函数体")]),s._v(" "),a("li",[s._v("返回（若无return 返回undefined）")])]),s._v(" "),a("blockquote",[a("ul",[a("li",[s._v("宿主对象就是执行JS脚本的环境提供的对象。对于嵌入到网页中的JS来说，其宿主对象就是浏览器提供的对象，所以又称为浏览器对象，如IE、Firefox等浏览器提供的对象。不同的浏览器提供的宿主对象可能不同，即使提供的对象相同，其实现方式也大相径庭！这会带来浏览器兼容问题，增加开发难度。")]),s._v(" "),a("li",[s._v("浏览器对象有很多，如Window和Document等等。")])])]),s._v(" "),a("h4",{attrs:{id:"方法调用-翻译垃圾-还得重翻原版"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#方法调用-翻译垃圾-还得重翻原版"}},[s._v("#")]),s._v(" 方法调用（翻译垃圾，还得重翻原版）")]),s._v(" "),a("blockquote",[a("p",[s._v("方法调用：如果表达式是属性访问表达式（例如a.f(x)），那么这个调用被称为方法调用")])]),s._v(" "),a("p",[s._v("在方法调用中，作为属性访问主体的对象和数组，便是其调用方法内this的指向（看下面的例子就明白了）")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),s._v("prototype"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function-variable function"}},[s._v("callThis")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("this")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" b "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" c "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("x"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(":")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("var")]),s._v(" d "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("b"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("callThis")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//=> [1, 2, 3]")]),s._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("c"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("callThis")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("//=> {x: 1}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br"),a("span",{staticClass:"line-number"},[s._v("8")]),a("br")])]),a("p",[s._v("this的指向便是调用者本身。")]),s._v(" "),a("p",[s._v("这种特性使得在面向对象编程范例中，函数可以调用其宿主对象。")]),s._v(" "),a("p",[s._v("来看后面这个重点的话：")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://giriawsh-bucket.oss-cn-beijing.aliyuncs.com/img/20200927230259.png",alt:"image-20200927230259821"}})]),s._v(" "),a("p",[s._v("那些不是方法调用的调用表达式，通常使用全局对象作为this的指向值。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://giriawsh-bucket.oss-cn-beijing.aliyuncs.com/img/20200927230532.png",alt:"image-20200927230532043"}})]),s._v(" "),a("p",[s._v("在ES5的严格模式下，函数在调用时将使用undefined作为this的值。")]),s._v(" "),a("p",[s._v("总结来说，this的指向在本篇中提到了三种情况（当然实际上会比这要复杂）")]),s._v(" "),a("ul",[a("li",[s._v("方法调用，this指向调用的主体")]),s._v(" "),a("li",[s._v("不是方法调用，通常使用全局对象作为this的指向值")]),s._v(" "),a("li",[s._v("ES5的严格模式下，使用undefined作为this的值")])]),s._v(" "),a("h2",{attrs:{id:"_6-对象创建表达式"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-对象创建表达式"}},[s._v("#")]),s._v(" 6. 对象创建表达式")]),s._v(" "),a("blockquote",[a("p",[s._v("对象创建表达式：创建一个对象并使用一个函数（构造函数）初始化新对象的属性")])]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Object")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// == new Object")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("new")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("Point")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("如果一个对象创建表达式不需要传入任何参数给构造函数，空圆括号可以省略。")]),s._v(" "),a("p",[s._v("计算对象创建表达式：")]),s._v(" "),a("ol",[a("li",[s._v("JS创建一个新的空对象")]),s._v(" "),a("li",[s._v("JS通过传入指定的参数，并"),a("strong",[s._v("将新参数当做this的值来调用一个指定的函数")])]),s._v(" "),a("li",[a("strong",[s._v("函数可以使用this来初始化这个新创建对象的属性")])]),s._v(" "),a("li",[s._v("被当成构造函数的函数不会返回一个值，并且这个新创建并被初始化后的对象就是整个对象创建表达式的值（总之就是返回个对象）")]),s._v(" "),a("li",[s._v("如果一个构造函数确实"),a("strong",[s._v("返回了一个对象")]),s._v("，那么这个对象就作为整个对象创建表达式的值，新创建的对象被废弃。")])])])}),[],!1,null,null,null);t.default=e.exports}}]);