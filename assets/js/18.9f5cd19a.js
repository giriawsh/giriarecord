(window.webpackJsonp=window.webpackJsonp||[]).push([[18],{368:function(t,s,a){"use strict";a.r(s);var n=a(42),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"第一章-node简介"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#第一章-node简介"}},[t._v("#")]),t._v(" 第一章 Node简介")]),t._v(" "),a("h2",{attrs:{id:"node给js带来的意义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node给js带来的意义"}},[t._v("#")]),t._v(" Node给JS带来的意义")]),t._v(" "),a("p",[t._v("Chrome浏览器和Node的组件构成：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://giriawsh-bucket.oss-cn-beijing.aliyuncs.com/img/20201202184605.png",alt:"image-20201202184558332"}})]),t._v(" "),a("p",[t._v("浏览器中除了V8作为JS引擎外，还有一个WebKit布局引擎。对于前端浏览器的发展现状而言，HTML5标准统一的过程是相当缓慢的，JS长久以来限制在浏览器的沙箱中运行，它的能力取决于浏览器中间层提供的支持有多少。")]),t._v(" "),a("p",[t._v("除了HTML、WebKit、显卡这些UI技术没有支持外，Node和结构与Chrome十分相似。它们都是基于事件驱动的异步架构：浏览器通过事件驱动来服务界面上的交互，Node通过事件驱动来服务I/O。")]),t._v(" "),a("p",[t._v("Node打破了过去JS只能在浏览器中运行的局面，前后端编程环境同一，可以大大降低前后端转换所需要的上下文交换代价。")]),t._v(" "),a("blockquote",[a("p",[a("img",{attrs:{src:"https://giriawsh-bucket.oss-cn-beijing.aliyuncs.com/img/20201202185023.png",alt:"image-20201202185022954"}})])]),t._v(" "),a("h2",{attrs:{id:"node的特点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node的特点"}},[t._v("#")]),t._v(" Node的特点")]),t._v(" "),a("h3",{attrs:{id:"_1-异步i-o"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-异步i-o"}},[t._v("#")]),t._v(" 1. 异步I/O")]),t._v(" "),a("p",[t._v("比较熟悉的是发起Ajax调用请求：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("$"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("post")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/url'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("title"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'test'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("data")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"收到响应"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"发送Ajax结束"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => ")]),t._v("\n发送Ajax结束\n收到响应\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])]),a("p",[t._v("调用"),a("code",[t._v("$.post()")]),t._v("后，后续代码是被立即执行的，而“收到响应”的执行时间是不被预期的。")]),t._v(" "),a("p",[t._v("我们只能知道它将在这个异步请求结束后执行，但并不知道具体的时间点。")]),t._v(" "),a("p",[t._v("异步调用中对于结果值得捕获符合"),a("u",[t._v("“Don't call me, I will call you”")]),t._v("原则。注重结果，不关心过程。")]),t._v(" "),a("p",[t._v("经典Ajax调用过程如下：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://giriawsh-bucket.oss-cn-beijing.aliyuncs.com/img/image-20201207233246342.png",alt:"image-20201207233246342"}})]),t._v(" "),a("p",[t._v("在Node中，异步I/O也很常见。以读取文件为例，我们可以看到它与前端Ajax调用的方式是极其类似的：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v("  fs  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'fs'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nfs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("readFile")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/path'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("  file")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'读取文件完成'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'发起读取文件'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[t._v('这里的“发起读取文件"是在“读取文件完成"之前输出的。同样，“读取文件完成"的执行也取决于读取文件的异步调用何时结束。')]),t._v(" "),a("p",[t._v("Node中的经典调用周期如下：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://giriawsh-bucket.oss-cn-beijing.aliyuncs.com/img/image-20201207233535373.png",alt:"image-20201207233535373"}})]),t._v(" "),a("p",[t._v("在Node中，绝大多数的操作都以异步的方式进行调用。")]),t._v(" "),a("p",[t._v("在Node中，我们可以从语言层面很自然地"),a("strong",[t._v("进行并行I/O操作")]),t._v("。每个调用之间无须等待之前的I/O调用结束。")]),t._v(" "),a("p",[t._v("下面的两个文件读取任务的耗时"),a("u",[t._v("取决于最慢的那个文件读取的耗时")]),t._v("：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("fs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("readFile")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/path1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" file")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'读取文件1完成'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\nfs"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("readFile")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/path2'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" file")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'读取文件2完成'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br")])]),a("p",[t._v("而对于同步I/O而言，它们的耗时是两个任务的耗时之和。")]),t._v(" "),a("h3",{attrs:{id:"_2-事件与回调函数"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-事件与回调函数"}},[t._v("#")]),t._v(" 2. 事件与回调函数")]),t._v(" "),a("p",[t._v("在JS中，事件机制得到了广泛的应用。Node将前端浏览器中应用广泛且成熟的事件引入后端， 配合异步I/O，将事件点暴露给业务逻辑。")]),t._v(" "),a("p",[t._v("下面的例子展示的是Ajax异步提交的服务器端处理过程。")]),t._v(" "),a("p",[t._v("Node创建一个Web服务器，并侦听8080端口。对于服务器，我们为其绑定了"),a("u",[t._v("request事件")]),t._v("，对于请求对象，我们为其绑定了"),a("u",[t._v("data事件和end事件")]),t._v("：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" http "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'http'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" querystring "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'querystring'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 侦听服务器的request事件")]),t._v("\n\nhttp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("createServer")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("req"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" res")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" \n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" postData "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" \n    req"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("setEncoding")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'utf8'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 侦听请求的data事件")]),t._v("\n\treq"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'data'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("trunk")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" postData "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" trunk"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// 侦听请求的end事件")]),t._v("\n\treq"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("on")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'end'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("end")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("postData"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("listen")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8080")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'服务器启动完成'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br")])]),a("p",[t._v("相应在前端Ajax请求绑定success事件，发出请求后，只需关心请求成功时执行的相应业务逻辑（success匿名函数）：")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[t._v("$"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("ajax")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'url'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/url'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'method'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'POST'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'data'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'success'")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("data")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// success事件")]),t._v("\n\t"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])]),a("p",[t._v("事件编程方式具有"),a("strong",[t._v("轻量级、松耦合、只关注事务点")]),t._v("等优势。但是在多个异步任务的场景下，事件与事件之间"),a("strong",[t._v("各自独立，如何协作")]),t._v("是一个问题。")]),t._v(" "),a("p",[t._v("回调函数无处不在，因为在JS中函数时第一等公民，可以将函数作为对象传递给方法作为实参进行调用。")]),t._v(" "),a("p",[t._v("Node除了异步和事件外，回调函数是一大特色。纵观下来，回调函数也是最好的"),a("u",[t._v("接受异步调用返回数据")]),t._v("的方式。")]),t._v(" "),a("p",[t._v("代码的"),a("u",[t._v("编写顺序与执行顺序并无关系")]),t._v("，这可能造成阅读上的障碍。在流程控制方面，因为穿插了异步方法和回调函数，与常规的同步方式相比，变得不那么一目了然了。")]),t._v(" "),a("h3",{attrs:{id:"_3-单线程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-单线程"}},[t._v("#")]),t._v(" 3. 单线程")]),t._v(" "),a("p",[t._v("Node保持了JavaScript在浏览器中单线程的特点。而且在Node中，JavaScript与其余线程是"),a("strong",[t._v("无法共享任何状态")]),t._v("的。")]),t._v(" "),a("p",[t._v("单线程的最大好处是不用像多线程编程那样处处在意状态的同步问题，这里"),a("u",[t._v("没有死锁的存在")]),t._v("，"),a("u",[t._v("也没有线程上下文交换")]),t._v("所带来的性能上的开销。")]),t._v(" "),a("p",[t._v("同样，单线程也有它自身的弱点，单线程的弱点具体有以下3方面：")]),t._v(" "),a("ul",[a("li",[t._v("无法利用多核CPU。")]),t._v(" "),a("li",[t._v("错误会引起整个应用退出，应用的健壮性值得考验。")]),t._v(" "),a("li",[t._v("大量计算占用CPU导致无法继续调用异步I/O。")])]),t._v(" "),a("p",[t._v("浏览器中JS与UI共用一个线程，JS长时间执行会导致UI的渲染和响应被中断。")]),t._v(" "),a("p",[t._v("在Node中，长时间的CPU占用也会导致后续的异步I/O无法调用，已完成的异步I/O的回调函数也会得不到及时执行。")]),t._v(" "),a("blockquote",[a("p",[a("img",{attrs:{src:"https://giriawsh-bucket.oss-cn-beijing.aliyuncs.com/img/image-20201207235651922.png",alt:"image-20201207235651922"}})])]),t._v(" "),a("p",[t._v("Node采用了与Web Worker相同的思路来解决单线程中大计算量的问题："),a("strong",[t._v("child_process")])]),t._v(" "),a("p",[t._v("子进程的出现，意味着Node可以从容地应对单线程在健壮性和无法利用多核CPU方面的问题。")]),t._v(" "),a("p",[t._v("通过将计算分发到各个子进程，可以将大量计算分解掉，然后再"),a("u",[t._v("通过进程之间的事件消息")]),t._v("来传递结果，这可以很好地保持应用模型的简单和低依赖。")]),t._v(" "),a("p",[t._v("通过"),a("strong",[t._v("Master-Worker")]),t._v("的管理方式，也可以很好地管理各个工作进程，以达到更高的健壮性。")]),t._v(" "),a("h3",{attrs:{id:"_4-跨平台"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-跨平台"}},[t._v("#")]),t._v(" 4. 跨平台")]),t._v(" "),a("p",[t._v("起初Node只能在Linux平台上运行，Windows上只能借助于Cygwin或者MingGW。现在Node已经可以直接在Windows平台上运行了。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://giriawsh-bucket.oss-cn-beijing.aliyuncs.com/img/image-20201207235956977.png",alt:"image-20201207235956977"}})]),t._v(" "),a("blockquote",[a("p",[t._v("兼容Windows和*nix平台主要得益于Node在架构层面的改动，它在操作系统与Node上层模块系统之间构建了一层"),a("strong",[t._v("平台层架构")]),t._v("，即"),a("strong",[t._v("libuv")]),t._v("。目前，libuv已经成为许多系统实现跨平台的基础组件。")]),t._v(" "),a("p",[t._v("通过良好的架构，Node的第三方C++模块也可以借助libuv实现跨平台。目前，除了没有保持更新的C++模块外，大部分C++模块都能实现跨平台的兼容。")])]),t._v(" "),a("h2",{attrs:{id:"node的应用场景"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node的应用场景"}},[t._v("#")]),t._v(" Node的应用场景")]),t._v(" "),a("p",[t._v("关于Node，探讨得较多的主要有I/O密集型和CPU密集型。")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"custom-block-title"},[t._v("CPU密集型和I/O密集型是什么")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://zhuanlan.zhihu.com/p/62766037",target:"_blank",rel:"noopener noreferrer"}},[t._v("参考文章"),a("OutboundLink")],1)]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("CPU密集型（CPU-bound）")])])]),t._v(" "),a("p",[t._v("CPU密集型也叫计算密集型，指的是系统的硬盘、内存性能相对CPU要好很多，此时，系统运作大部分的状况是CPU Loading 100%，CPU要读/写I/O(硬盘/内存)，I/O在很短的时间就可以完成，而CPU还有许多运算要处理，CPU Loading很高。")]),t._v(" "),a("p",[t._v("在多重程序系统中，大部份时间用来做计算、逻辑判断等CPU动作的程序称之CPU bound。例如一个计算圆周率至小数点一千位以下的程序，在执行的过程当中绝大部份时间用在三角函数和开根号的计算，便是属于CPU bound的程序。")]),t._v(" "),a("p",[t._v("CPU bound的程序一般而言CPU占用率相当高。这可能是因为任务本身不太需要访问I/O设备，也可能是因为程序是多线程实现因此屏蔽掉了等待I/O的时间。")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("IO密集型（I/O bound）")])])]),t._v(" "),a("p",[t._v("IO密集型指的是系统的CPU性能相对硬盘、内存要好很多，此时，系统运作，大部分的状况是CPU在等I/O (硬盘/内存) 的读/写操作，此时CPU Loading并不高。")]),t._v(" "),a("p",[t._v("I/O bound的程序一般在达到性能极限时，CPU占用率仍然较低。这可能是因为任务本身需要大量I/O操作，而pipeline做得不是很好，没有充分利用处理器能力。")]),t._v(" "),a("p",[t._v("IO密集型任务执行期间，99%的时间都花在IO上，花在CPU上的时间很少，因此，用运行速度极快的C语言替换用Python这样运行速度极低的脚本语言，完全无法提升运行效率。对于IO密集型任务，最合适的语言就是开发效率最高（代码量最少）的语言，脚本语言是首选，C语言最差。")]),t._v(" "),a("p",[t._v("总之，计算密集型程序适合C语言多线程，I/O密集型适合脚本语言开发的多线程。")])]),t._v(" "),a("h3",{attrs:{id:"_1-i-o密集型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-i-o密集型"}},[t._v("#")]),t._v(" 1. I/O密集型")]),t._v(" "),a("p",[t._v("Node面向网络且擅长并行I/O，能够有效地组织起更多的硬件资源，从而提供更多好的服务。")]),t._v(" "),a("p",[t._v("I/O密集的优势：Node利用"),a("strong",[t._v("事件循环")]),t._v("的处理能力，而不是启动每一个线程为每一个请求服务，资源占用极少。")]),t._v(" "),a("h3",{attrs:{id:"_2-是否不擅长cpu密集型业务"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-是否不擅长cpu密集型业务"}},[t._v("#")]),t._v(" 2. 是否不擅长CPU密集型业务")]),t._v(" "),a("p",[t._v("实际上V8的执行效率是十分高的。对比于C和Go语言（静态语言），Node是足够高效的，它优秀的运算能力主要来自V8的深度性能优化。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://giriawsh-bucket.oss-cn-beijing.aliyuncs.com/img/image-20201212202418682.png",alt:"image-20201212202418682"}})]),t._v(" "),a("p",[t._v("CPU密集型应用给Node 带来的挑战主要是：")]),t._v(" "),a("p",[t._v("由于JavaScript单线程的原因，如果有长时间运行的计算（比如大循环），将会"),a("u",[t._v("导致CPU时间片不能释放，使得后续I/O无法发起。")])]),t._v(" "),a("p",[t._v("但是"),a("strong",[t._v("适当调整和分解大型运算任务为多个小任务")]),t._v("，使得运算能够适时释放，不阻塞I/O调用的发起，这样既可同时享受到并行异步I/O的好处，又能充分利用CPU。")]),t._v(" "),a("p",[t._v("关于CPU密集型应用，Node的"),a("strong",[t._v("异步I/O")]),t._v("已经解决了在单线程上CPU与I/O之间阻塞无法重叠利用的问题，I/O阻塞造成的性能浪费远比CPU的影响小。")]),t._v(" "),a("p",[t._v("对于"),a("u",[t._v("长时间运行的计算")]),t._v("，如果它的耗时超过普通阻塞I/O的耗时，那么应用场景就需要重新评估，因为这类计算比阻塞I/O还影响效率，甚至说就是一个纯计算的场景，根本没有I/O。"),a("u",[t._v("此类应用场景或许应当采用多线程的方式进行计算。")])]),t._v(" "),a("p",[t._v("Node虽然没有提供多线程用于计算支持，但是还是有以下两个方式来充分利用CPU。")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("Node可以通过"),a("strong",[t._v("编写C/C++扩展的方式")]),t._v("更高效地利用CPU，将一些V8不能做到性能极致的地方通过C/C++来实现。")])]),t._v(" "),a("li",[a("p",[t._v("如果单线程的Node不能满足需求，甚至用了C/C++扩展后还觉得不够，那么"),a("strong",[t._v("通过子进程的方式")]),t._v("，将一部分Node进程当做常驻服务进程用于计算，然后利用进程间的消息来传递结果，将计算与I/O分离，这样还能充分利用多CPU。")])])]),t._v(" "),a("p",[t._v("CPU密集不可怕，如何合理调度是诀窍。")]),t._v(" "),a("h3",{attrs:{id:"_3-与遗留系统和平共处"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-与遗留系统和平共处"}},[t._v("#")]),t._v(" 3. 与遗留系统和平共处")]),t._v(" "),a("p",[t._v("在Web端，过去大多都是同步的方式编写的程序，这种串行调用下层应用数据的过程中充斥着串行的等待时间。")]),t._v(" "),a("p",[t._v("如果采用多线程来解决这种串行等待，又或多或少地显得小题大作。在Node 中，语言层面即可天然并行的特性在这种场景中显得十分有效。对于已有的稳定系统，并非意味着我们要抛弃掉。")]),t._v(" "),a("blockquote",[a("p",[t._v("LinkedIn在他们的移动版网站上的实践非常典型地说明了这个问题。旧有的系统具有非常稳定的数据输出，持续为传统网站服务，同时为移动版提供数据源，Node将该数据源当做数据接口， 发挥异步并行的优势，而不用关心它背后是用什么语言实现的。")]),t._v(" "),a("p",[t._v("这方面，国内的雪球财经也有很好的实践。雪球财经是从旧有的Java项目中分离出一个子项目，在这个子项目中，没有继续采用Java/JSP而是采用Node来完成Web端的开发，使得前端工程师在HTTP协议栈的两端能够高效灵活地开发，避免了Java烦琐的表达；另一方面，又利用Java 作为后端接口和中间件，使其具有良好的稳定性。两者互相结合，取长补短。")])]),t._v(" "),a("h3",{attrs:{id:"_4-分布式应用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-分布式应用"}},[t._v("#")]),t._v(" 4. 分布式应用")]),t._v(" "),a("p",[t._v("分布式应用意味着可伸缩性的要求非常高。")]),t._v(" "),a("p",[t._v("Node高效利用并行I/O的过程，也是高效使用数据库的过程。对于Node，这个行为只是一次普通的I/O，对于分布式数据库而言，却是一次复杂的计算，所以也是进而充分压榨硬件资源的过程。")]),t._v(" "),a("h2",{attrs:{id:"node的使用者"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#node的使用者"}},[t._v("#")]),t._v(" Node的使用者")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("**前后端编程口言环境统一。**这类倚重点的代表是雅虎。雅虎开放了Cocktail框架，利用自己深厚的前端沉淀，将YUI3这个前端框架的能力借助Node延伸到服务器端，使得使用者摆脱了H常工作中一边写JavaScript一边写PHP所带来的上下文交换负担。")])]),t._v(" "),a("li",[a("p",[t._v("**Node带来的高性能I/O用于实时应用。**Voxer将Node应用在实时语音上。国内腾讯的朋友网将Node应用在长连接中，以提供实时功能，花瓣网、蘑菇街等公司通过socket.io实现实时通知的功能。")])]),t._v(" "),a("li",[a("p",[t._v("**并行I/O使得使用者可以更高效地利用分布式环境。**阿里巴巴和eBay是这方面的典型。阿里巴巴的NodeFox和eBay的ql.io都是借用Node并行I/O的能力，更高效地使用已有的数据。")])]),t._v(" "),a("li",[a("p",[t._v("**并行I/O,有效利用稳定接口提升Web渲染能力。**雪球财经和LinkedIn的移动版网站均是这种案例，撇弃同步等待式的顺序请求，大胆采用并行I/O，加速数据的获取进而提升Web 的渲染速度。")])]),t._v(" "),a("li",[a("p",[t._v("**云计算平台提供Node支持。**微软将Node引入Azure的开发中，阿里云、百度均纷纷在云服务器上提供Node应用托管服务，Joyent更是云计算中提供Node支持的代表。这类平台看重JavaScript带来的开发上的优势，以及低资源占用、高性能的特点。")])]),t._v(" "),a("li",[a("p",[t._v("**游戏开发领域。**游戏领域对实时和并发有很高的要求，网易开源了pomelo实时框架，可以应用在游戏和高实时应用中。")])]),t._v(" "),a("li",[a("p",[t._v("**工具类应用。**过去依赖Java或其他语言构建的前端工具类应用，纷纷被一些前端工程师用Node重写，用前端熟悉的语言为前端构建熟悉的工具。")])])])])}),[],!1,null,null,null);s.default=e.exports}}]);