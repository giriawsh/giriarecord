(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{377:function(s,t,a){"use strict";a.r(t);var e=a(42),_=Object(e.a)({},(function(){var s=this,t=s.$createElement,a=s._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[a("h2",{attrs:{id:"✍️前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#✍️前言"}},[s._v("#")]),s._v(" ✍️前言")]),s._v(" "),a("p",[s._v("本章会分多篇介绍JS中的类型、值和变量，后续还会有相应的章节进行深入介绍。")]),s._v(" "),a("h2",{attrs:{id:"_1-基本概念"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-基本概念"}},[s._v("#")]),s._v(" 1. 基本概念")]),s._v(" "),a("h3",{attrs:{id:"_1-1-数据类型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-数据类型"}},[s._v("#")]),s._v(" 1.1 数据类型")]),s._v(" "),a("blockquote",[a("p",[s._v("数据类型：能够表示并操作的值的类型")])]),s._v(" "),a("p",[s._v("编程语言最基本的特性就是能够支持多种数据类型。")]),s._v(" "),a("blockquote",[a("p",[s._v("变量：一个值的符号名称，可以通过名称来获得对值的引用")])]),s._v(" "),a("p",[s._v("JS的数据类型：")]),s._v(" "),a("ul",[a("li",[s._v("原始类型：包括数字、字符串、布尔值、null、undefined，后面两个分别代表了各自特殊类型的唯一成员（孤儿确认）。")]),s._v(" "),a("li",[s._v("对象类型：除上面以外的所有东西。\n"),a("ul",[a("li",[s._v("对象时属性的集合，每个属性都由“名/值对”构成。其中有一个比较特殊的对象——全局对象，后面会讲到。")]),s._v(" "),a("li",[s._v("包括一般对象、数组、函数等")])])])]),s._v(" "),a("blockquote",[a("p",[s._v("数组：普通的JS对象是“命名值”的无序集合。JS同样定义了一种特殊对象即数组，表示"),a("strong",[s._v("带编号的值的无序集合")]),s._v("。")]),s._v(" "),a("p",[s._v("JS为数组定义了专用的语法，使数组拥有一些和普通对象不同的特有行为特性。（数据类型中的上层阶级确认）")])]),s._v(" "),a("blockquote",[a("p",[s._v("函数：是具有与它相关联的可执行代码的对象。（爷有关联可执行代码）")]),s._v(" "),a("p",[s._v("通过调用函数来运行可执行代码，并返回运算结果。和数组一样，函数的行为特征也与众不同，JS也为它定义了专用语法。（上层阶级+1）")])]),s._v(" "),a("p",[s._v("最重要的是，函数们都是真值（我永远是true理）。并且JS可以将它们当做普通对象来对待（皇帝不高兴，把你当下人也是可以的）。")]),s._v(" "),a("blockquote",[a("p",[s._v("构造函数：当函数用来初始化（new）一个新建的对象")])]),s._v(" "),a("p",[s._v("每个构造函数定义了一"),a("strong",[s._v("类")]),s._v("对象——由不同构造函数初始化的对象的集合。")]),s._v(" "),a("p",[s._v("类可以看做是对象类型的子类型（毕竟是由对象类型的子集->函数->用来初始化对象->构造函数->定义了某类），包括：")]),s._v(" "),a("ul",[a("li",[s._v("数组类")]),s._v(" "),a("li",[s._v("函数类")]),s._v(" "),a("li",[s._v("日期类")]),s._v(" "),a("li",[s._v("正则类")]),s._v(" "),a("li",[s._v("错误类")]),s._v(" "),a("li",[s._v("自己定义的构造函数类")])]),s._v(" "),a("h3",{attrs:{id:"_1-2-内存管理机制"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-内存管理机制"}},[s._v("#")]),s._v(" 1.2 内存管理机制")]),s._v(" "),a("p",[s._v("JS解释器有自己的内存管理机制，可以自动对内存进行垃圾回收。程序员只要按需创建对象，不用担心销毁和内存回收工作。")]),s._v(" "),a("p",[a("strong",[s._v("当不再有任何引用指向一个对象，解释器就会自动回收它所占用的内存资源。")])]),s._v(" "),a("h3",{attrs:{id:"_1-3-其他划分"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-其他划分"}},[s._v("#")]),s._v(" 1.3 其他划分")]),s._v(" "),a("p",[s._v("根据能不能拥有方法")]),s._v(" "),a("ul",[a("li",[s._v("可变mutable类型\n"),a("ul",[a("li",[s._v("值可以修改")]),s._v(" "),a("li",[s._v("对象、数组")])])]),s._v(" "),a("li",[s._v("不可变immutable类型\n"),a("ul",[a("li",[s._v("不可以修改")]),s._v(" "),a("li",[s._v("数字、字符串（没错我也不行）、布尔值、null、undefined")])])])]),s._v(" "),a("h3",{attrs:{id:"_1-4-类型转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-4-类型转换"}},[s._v("#")]),s._v(" 1.4 类型转换")]),s._v(" "),a("p",[s._v("JS可以自由地进行数据类型转换，但是转换规则会对“判断相等”造成影响")]),s._v(" "),a("h3",{attrs:{id:"_1-5-类型定义"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-5-类型定义"}},[s._v("#")]),s._v(" 1.5 类型定义")]),s._v(" "),a("p",[s._v("JS变量是无类型的（untyped），变量可以被赋予任何类型的值（是一种很酷的设计，为自己的可移植性、灵活性奠定了基础），同样一个变量也可以被重新赋予不同类型的值。")]),s._v(" "),a("p",[s._v("JS采用词法作用域。")]),s._v(" "),a("blockquote",[a("ul",[a("li",[a("p",[s._v("作用域：是指程序源代码中定义变量的区域")])]),s._v(" "),a("li",[a("p",[s._v("词法作用域：函数的作用域在函数定义的时候就决定了。")])]),s._v(" "),a("li",[a("p",[s._v("动态作用域：函数的作用域是在函数调用的时候才决定的")])])])]),s._v(" "),a("blockquote",[a("p",[s._v("全局变量：不在任何函数内声明的变量，它在JS程序中的任何地方都是可见的。")]),s._v(" "),a("p",[s._v("函数作用域：在函数内声明的变量具有的作用域，只在函数内可见")])]),s._v(" "),a("p",[s._v("这些下文也会讲到。")]),s._v(" "),a("h2",{attrs:{id:"_2-数字"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-数字"}},[s._v("#")]),s._v(" 2. 数字")]),s._v(" "),a("p",[a("strong",[s._v("JS不区分整数值和浮点数值，JS中所有数字均用浮点数值表示。")])]),s._v(" "),a("p",[s._v("JS采用IEEE754标准定义的64位浮点格式表示数字。")]),s._v(" "),a("h3",{attrs:{id:"ieee754标准"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ieee754标准"}},[s._v("#")]),s._v(" *IEEE754标准")]),s._v(" "),a("p",[s._v("在IEEE 754标准中浮点数由三部分组成：符号位（sign bit），有偏指数（biased exponent），小数（fraction）。浮点数分为两种，单精度浮点数（single precision）和双精度浮点数（double precision），它们两个所占的位数不同。")]),s._v(" "),a("ul",[a("li",[s._v("单精度浮点数（共32位）：\n1个符号位\n8个指数位\n23个小数位")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://giriawsh-bucket.oss-cn-beijing.aliyuncs.com/img/20200915181557.png",alt:"img"}})]),s._v(" "),a("ul",[a("li",[s._v("双精度浮点数（共64位）-> JS属于这一种\n1个符号位\n11个指数位\n52个小数位")])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://giriawsh-bucket.oss-cn-beijing.aliyuncs.com/img/20200915181622.png",alt:"img"}})]),s._v(" "),a("h3",{attrs:{id:"_2-1-整数范围"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-整数范围"}},[s._v("#")]),s._v(" 2.1 整数范围")]),s._v(" "),a("p",[s._v("整数范围是从-2"),a("sup",[s._v("53")]),s._v(" ~2"),a("sup",[s._v("53")]),s._v("（包含边界值）")]),s._v(" "),a("p",[s._v("如果超过此范围的整数，则无法保证低位数字的精度。")]),s._v(" "),a("p",[s._v("然而JS中实际操作（例如数组索引、位操作符）是基于32位整数")]),s._v(" "),a("blockquote",[a("p",[s._v("数字直接量：当一个数字直接出现在JS程序中时")])]),s._v(" "),a("h3",{attrs:{id:"_2-2-整型直接量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-整型直接量"}},[s._v("#")]),s._v(" 2.2 整型直接量")]),s._v(" "),a("p",[s._v("在JS程序中，用一个数字序列表示一个十进制整数。")]),s._v(" "),a("p",[s._v("除了"),a("strong",[s._v("十进制")]),s._v("，JS还能识别"),a("strong",[s._v("十六进制")]),s._v("（以0x或0X为前缀），JS的某些实现"),a("strong",[s._v("可以允许采用八进制")]),s._v("（以0开始）")]),s._v(" "),a("p",[s._v("但是有些不支持八进制，因此最好不要使用以0位前缀的整型直接量。（ES6的严格模式下，八进制直接量是被禁止的）")]),s._v(" "),a("h3",{attrs:{id:"_2-3-浮点型直接量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-3-浮点型直接量"}},[s._v("#")]),s._v(" 2.3 浮点型直接量")]),s._v(" "),a("p",[s._v("支持传统实数写法：一个实数 = 整数部分 + 小数点 + 小数部分")]),s._v(" "),a("p",[s._v("指数计数法： 实数后+e/E+(正号或负号)+整型的指数")]),s._v(" "),a("p",[s._v("eg: 1.473821E-32 = 1.473821*10"),a("sup",[s._v("-32")])]),s._v(" "),a("h3",{attrs:{id:"_2-4-js中的算术运算"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-4-js中的算术运算"}},[s._v("#")]),s._v(" 2.4 JS中的算术运算")]),s._v(" "),a("p",[s._v("基本运算符：+ - * / %")]),s._v(" "),a("p",[s._v("复杂运算：由Math对象的属性定义的函数和常量来实现")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://giriawsh-bucket.oss-cn-beijing.aliyuncs.com/img/20200915183159.png",alt:"image-20200915183159573"}})]),s._v(" "),a("h4",{attrs:{id:"溢出和下溢"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#溢出和下溢"}},[s._v("#")]),s._v(" 溢出和下溢")]),s._v(" "),a("blockquote",[a("p",[s._v("溢出：当数字运算结果超过了JS所能表示的数字上下限")])]),s._v(" "),a("p",[s._v("返回Infinity和-Infinity")]),s._v(" "),a("p",[s._v("基于他们的加减乘除运算结果还是无穷大（保留正负号）")]),s._v(" "),a("blockquote",[a("p",[s._v("下溢：当运算结果无限接近于零并比JS所能表示的最小值还小")])]),s._v(" "),a("p",[s._v("返回0.当一个负数下溢是会返回负零")]),s._v(" "),a("h4",{attrs:{id:"特殊运算情况"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#特殊运算情况"}},[s._v("#")]),s._v(" 特殊运算情况")]),s._v(" "),a("ul",[a("li",[s._v("被零整除：不报错，返回Infinity或-Infinity")]),s._v(" "),a("li",[s._v("0/0：没有意义，返回NaN")]),s._v(" "),a("li",[s._v("无穷大除以无穷大，给任意负数作开方运算，运算符与不是数字或无法转换为数字的操作数一起使用：返回NaN")])]),s._v(" "),a("p",[s._v("Inifity和NaN和Number对象定义的属性值在ES5中被定义为只读。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://giriawsh-bucket.oss-cn-beijing.aliyuncs.com/img/20200915183238.png",alt:"image-20200915183238715"}})]),s._v(" "),a("h4",{attrs:{id:"非数字值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#非数字值"}},[s._v("#")]),s._v(" 非数字值")]),s._v(" "),a("p",[s._v("非数字值：NaN、字符串、对象等不是数字的值")]),s._v(" "),a("p",[a("strong",[s._v("它和任何值都不相等，包括自身")]),s._v("。")]),s._v(" "),a("p",[s._v("所以不能通过x==NaN判断是否是NaN,应该通过x!=x来判断，也可以使用函数"),a("strong",[s._v("isNaN()")]),s._v("：如果参数是NaN或者一个非数字值都返回true")]),s._v(" "),a("p",[s._v("还有一个类似函数isFinite()：参数不是NaN、Infinity或-Infinity或非数字值的时候返回true")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://giriawsh-bucket.oss-cn-beijing.aliyuncs.com/img/20200915184346.png",alt:"image-20200915184346692"}})]),s._v(" "),a("p",[s._v("经过测试有两种很有意思的情况（图中的第二个和第三个红框）")]),s._v(" "),a("p",[s._v("我们看下MDN中该函数的定义：")]),s._v(" "),a("blockquote",[a("p",[s._v("isFinite (number)")]),s._v(" "),a("p",[s._v("Returns false if the argument coerces to NaN, +∞, or −∞, and otherwise returns true.")]),s._v(" "),a("p",[s._v("If ToNumber(number) is NaN, +∞, or −∞, return false.")]),s._v(" "),a("p",[s._v("Otherwise, return true.")])]),s._v(" "),a("p",[s._v("实际上针对输入，该函数隐式调用了Number()转换函数，在内部实现中也可以看到：")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("function")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("isFinite")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[s._v("someInput")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("return")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("isNaN")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),s._v("someInput"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v("\n    someInput "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" Number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("POSITIVE_INFINITY")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("&&")]),s._v("\n    someInput "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("!=")]),s._v(" Number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("NEGATIVE_INFINITY")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br")])]),a("p",[s._v("注意使用的是!=包含了比较时的强制类型转换。再到浏览器里试验一下。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://giriawsh-bucket.oss-cn-beijing.aliyuncs.com/img/20200915185012.png",alt:"image-20200915185012857"}})]),s._v(" "),a("p",[s._v("真相大白了，经过Number转换后，[]和[1]和null返回的都不是NaN或者Infinity。")]),s._v(" "),a("h4",{attrs:{id:"负零值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#负零值"}},[s._v("#")]),s._v(" 负零值")]),s._v(" "),a("p",[s._v("它和正零值是相等的（甚至在严格相等测试下也是），这两个值几乎一模一样，除了作为除数。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://giriawsh-bucket.oss-cn-beijing.aliyuncs.com/img/20200915183553.png",alt:"image-20200915183553328"}})]),s._v(" "),a("h3",{attrs:{id:"_2-5-二进制浮点数和四舍五入错误"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-5-二进制浮点数和四舍五入错误"}},[s._v("#")]),s._v(" 2.5 二进制浮点数和四舍五入错误")]),s._v(" "),a("p",[s._v("实数有无数个，但JS通过浮点数表示是有限的。当JS中使用实数的时候，常常知识真实值的一个近似表示。")]),s._v(" "),a("p",[s._v("IEEE-754浮点数表示法可以准确地表示二幂次分数（1/2,1/8等），但并不能准确地表示类似0.1这样的简单数字")]),s._v(" "),a("p",[s._v("由此带来0.1 + 0.2 !== 0.3的问题，原因如下：")]),s._v(" "),a("blockquote",[a("p",[s._v("首先，计算机无法直接对十进制的数字进行运算，这是硬件物理特性已经决定的。这样运算就分成了两个部分："),a("strong",[s._v("先按照IEEE 754转成相应的二进制，然后对阶运算")]),s._v("。"),a("strong",[s._v("精度损失可能出现在进制转化和对阶运算过程中")]),s._v("*")]),s._v(" "),a("ul",[a("li",[s._v("进制转换")])]),s._v(" "),a("p",[s._v("0.1和0.2转换成二进制后会无限循环")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("0.1 -> 0.0001100110011001...(无限循环)\n0.2 -> 0.0011001100110011...(无限循环)\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br")])]),a("p",[s._v("但是由于IEEE 754尾数位数限制，需要将后面多余的位截掉")]),s._v(" "),a("p",[s._v("这样在进制之间的转换中精度已经损失")]),s._v(" "),a("ul",[a("li",[s._v("对阶运算")])]),s._v(" "),a("p",[s._v("由于指数位数不相同，运算时需要对阶运算 这部分也可能产生精度损失，最后的结果是")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v("0.0100110011001100110011001100110011001100110011001100 \n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("p",[s._v("结果转换成十进制之后就是0.30000000000000004")])]),s._v(" "),a("p",[s._v("因此在数值比较中，可以使用ES6中引入的极小的常量"),a("code",[s._v("Number.EPSILON")]),s._v("。它表示 1 与大于 1 的最小浮点数之间的差。")]),s._v(" "),a("p",[a("code",[s._v("Number.EPSILON")]),s._v("实际上是 JavaScript 能够表示的最小精度。误差如果小于这个值，就可以认为已经没有意义了，即不存在误差了。")]),s._v(" "),a("blockquote",[a("p",[a("code",[s._v("Number.EPSILON")]),s._v("可以用来设置“能够接受的误差范围”。比如，"),a("strong",[s._v("误差范围设为 2 的-50 次方（即"),a("code",[s._v("Number.EPSILON * Math.pow(2, 2)")]),s._v("），即如果两个浮点数的差小于这个值，我们就认为这两个浮点数相等。")])])]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("-")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.3")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 5.551115123125783e-17")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5.551115123125783e-17")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("toFixed")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("20")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// '0.00000000000000005551'")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.1")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.2")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("===")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("0.3")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// false")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("5.551115123125783e-17")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v(" Number"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[s._v("EPSILON")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("*")]),s._v(" Math"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[s._v("pow")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(",")]),s._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[s._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// true")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br"),a("span",{staticClass:"line-number"},[s._v("4")]),a("br"),a("span",{staticClass:"line-number"},[s._v("5")]),a("br"),a("span",{staticClass:"line-number"},[s._v("6")]),a("br"),a("span",{staticClass:"line-number"},[s._v("7")]),a("br")])]),a("p",[s._v("JS的未来版本或许会支持十进制数字类型以避免舍入问题，当前可以更经常地使用大整数进行重要金融计算（譬如用“分”来代替小数“元”等）")]),s._v(" "),a("h3",{attrs:{id:"_2-6-日期和时间"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-6-日期和时间"}},[s._v("#")]),s._v(" 2.6 日期和时间")]),s._v(" "),a("p",[s._v("使用Date()构造函数，用来创建表示日期和时间的对象。提供了一些简单的API。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://giriawsh-bucket.oss-cn-beijing.aliyuncs.com/img/20200916172609.png",alt:"image-20200916172609267"}})]),s._v(" "),a("h2",{attrs:{id:"_3-文本"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-文本"}},[s._v("#")]),s._v(" 3. 文本")]),s._v(" "),a("blockquote",[a("p",[s._v("字符串：一组由16位值组成的不可变的有序序列，每个字符通常来自于Unicode字符集。字符串的长度是所含16位值得个数。")]),s._v(" "),a("p",[s._v("那些不能表示为16位的Unicode字符则遵循UTF-16编码规则——用两个16位值组成的一个序列表示。")]),s._v(" "),a("p",[s._v("也就是说，"),a("strong",[s._v("一个长度为2的JS字符串有可能表示一个Unicode字符。")])])]),s._v(" "),a("p",[a("img",{attrs:{src:"https://giriawsh-bucket.oss-cn-beijing.aliyuncs.com/img/20200916172918.png",alt:"image-20200916172918578"}})]),s._v(" "),a("h3",{attrs:{id:"_3-1-字符串的索引"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-1-字符串的索引"}},[s._v("#")]),s._v(" 3.1 字符串的索引")]),s._v(" "),a("p",[s._v("从零开始。空字符串的长度为0.")]),s._v(" "),a("h3",{attrs:{id:"_3-2-字符串直接量"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-2-字符串直接量"}},[s._v("#")]),s._v(" 3.2 字符串直接量")]),s._v(" "),a("p",[s._v("单引号可以包含双引号，双引号也可包含单引号。")]),s._v(" "),a("p",[s._v("字符串可以用反斜线来拆分数行。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://giriawsh-bucket.oss-cn-beijing.aliyuncs.com/img/20200916173038.png",alt:"image-20200916173038678"}})]),s._v(" "),a("ul",[a("li",[s._v("用单引号定界字符串：")])]),s._v(" "),a("p",[s._v("注意使用反斜线进行转义撇号")]),s._v(" "),a("ul",[a("li",[s._v("JS代码与HTML代码混杂时：")])]),s._v(" "),a("p",[s._v("最好分开使用各自的引号风格。譬如在JS中用单引号，在HTML中使用双引号。")]),s._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),s._v("button onclick"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),a("span",{pre:!0,attrs:{class:"token string"}},[s._v("\"alert('Thank you')\"")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("Click Me"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("<")]),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v("/")]),s._v("button"),a("span",{pre:!0,attrs:{class:"token operator"}},[s._v(">")]),s._v("\n")])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br")])]),a("h3",{attrs:{id:"_3-3-转义字符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-3-转义字符"}},[s._v("#")]),s._v(" 3.3 转义字符")]),s._v(" "),a("p",[s._v("反斜线符号后加一个字符，就不再表示它们的字面含义了。")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://giriawsh-bucket.oss-cn-beijing.aliyuncs.com/img/20200916173648.png",alt:"image-20200916173648588"}})]),s._v(" "),a("p",[a("img",{attrs:{src:"https://giriawsh-bucket.oss-cn-beijing.aliyuncs.com/img/20200916173659.png",alt:"image-20200916173659316"}})]),s._v(" "),a("p",[s._v("比较有意思的是转义字符的英文——escape sequence，加上反斜线老子就逃跑不受你原本编译控制了。")]),s._v(" "),a("h3",{attrs:{id:"_3-4-字符串的使用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-4-字符串的使用"}},[s._v("#")]),s._v(" 3.4 字符串的使用")]),s._v(" "),a("p",[s._v("+ 用于数字，表示两数相加，用于字符串表示字符串拼接")]),s._v(" "),a("p",[s._v("length属性可以得到字符串的长度")]),s._v(" "),a("p",[s._v("书中还提到了许多调用方法，不过也可以查看后面的大表（不愧是你万能工具书）")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://giriawsh-bucket.oss-cn-beijing.aliyuncs.com/img/20200916174222.png",alt:"image-20200916174222732"}})]),s._v(" "),a("p",[a("img",{attrs:{src:"https://giriawsh-bucket.oss-cn-beijing.aliyuncs.com/img/20200916174230.png",alt:"image-20200916174230449"}})]),s._v(" "),a("p",[s._v("记住！！在JS中字符串是固定不变的，这些方法实际上都返回了新的字符串，原字符串本身并没有发生改变。")]),s._v(" "),a("p",[s._v("ES5中，字符串可以当做只读数组，除了使用charAt()，也可以用一般的括号方法访问")]),s._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[s._v('s = "hello"\ns[0] // => "h"\ns[s.length-1] // => "o"\n')])]),s._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[s._v("1")]),a("br"),a("span",{staticClass:"line-number"},[s._v("2")]),a("br"),a("span",{staticClass:"line-number"},[s._v("3")]),a("br")])]),a("h3",{attrs:{id:"_3-5-字符串中的模式匹配"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-5-字符串中的模式匹配"}},[s._v("#")]),s._v(" 3.5 字符串中的模式匹配")]),s._v(" "),a("blockquote",[a("p",[s._v("正则表达式：JS定义了RegExp()构造函数，用来创建表示文本匹配模式的对象。JS采用Perl的正则表达式语法。（除了Perl还有Posix标准，可自行搜索）")])]),s._v(" "),a("p",[s._v("RegExp和Date一样，只是一种具有使用API的特殊对象，两条斜线之间的文本构成了一个正则表达式直接量，详细在第十章会讲到。")]),s._v(" "),a("p",[s._v("以下是部分使用方法：")]),s._v(" "),a("p",[a("img",{attrs:{src:"https://giriawsh-bucket.oss-cn-beijing.aliyuncs.com/img/20200916175503.png",alt:"image-20200916175503354"}})]),s._v(" "),a("h2",{attrs:{id:"参考网站"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考网站"}},[s._v("#")]),s._v(" 参考网站")]),s._v(" "),a("p",[a("a",{attrs:{href:"https://stackoverflow.com/questions/22489966/why-does-isfinitenull-true",target:"_blank",rel:"noopener noreferrer"}},[s._v("Stackoverflow-why does isFinite(null)===true?"),a("OutboundLink")],1)])])}),[],!1,null,null,null);t.default=_.exports}}]);