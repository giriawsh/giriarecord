(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{376:function(t,s,a){"use strict";a.r(s);var n=a(42),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h2",{attrs:{id:"✍️前言"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#✍️前言"}},[t._v("#")]),t._v(" ✍️前言")]),t._v(" "),a("p",[t._v("《JS权威指南》学习笔记第三章第二部分，涉及布尔值、null和undefined、全局对象、包装对象、原始值和引用值、类型转换等。")]),t._v(" "),a("h2",{attrs:{id:"_1-布尔值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_1-布尔值"}},[t._v("#")]),t._v(" 1. 布尔值")]),t._v(" "),a("p",[t._v("任意JS的值都可以转换为布尔值，以下这些值会被转换成false：")]),t._v(" "),a("ul",[a("li",[t._v("undefined")]),t._v(" "),a("li",[t._v("null")]),t._v(" "),a("li",[t._v("0")]),t._v(" "),a("li",[t._v("-0")]),t._v(" "),a("li",[t._v("NaN")]),t._v(" "),a("li",[t._v('""')])]),t._v(" "),a("p",[t._v("所有其他值，包括所有对象（数组）都会被转成true")]),t._v(" "),a("p",[t._v("还有诸如$$ || not等逻辑运算符，我就不再多做介绍了")]),t._v(" "),a("h2",{attrs:{id:"_2-null和undefined-重点"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_2-null和undefined-重点"}},[t._v("#")]),t._v(" 2. null和undefined（重点）")]),t._v(" "),a("p",[t._v("老生常谈了，这里记录一下权威指南中对这两个值的看法吧。")]),t._v(" "),a("ul",[a("li",[t._v("null")])]),t._v(" "),a("p",[t._v("常用来描述“空值”。"),a("strong",[t._v('对null进行typeof运算，返回字符串"object"，也就是说可以将null认为是一个特殊的对象值，含义是“非对象”。')])]),t._v(" "),a("p",[t._v("但实际上，"),a("strong",[t._v("通常认为null是它自有类型的唯一一个成员")]),t._v("（孤儿类型哈哈哈），"),a("strong",[t._v("它可以表示数字、字符串和对象是“无值”的。")])]),t._v(" "),a("blockquote",[a("p",[t._v("我还看到过关于"),a("code",[t._v('typeof(null) === "object"')]),t._v("的解释：")]),t._v(" "),a("p",[t._v("这是一个存在很久了 的 Bug。")]),t._v(" "),a("p",[t._v("typeof 实现原理\njs 在底层存储数据类型的方式")]),t._v(" "),a("p",[t._v("000：对象\n010：浮点数\n100：字符串\n110：布尔\n1：整数\nnull：所有机器码均为0\nundefined：用 −2^30 整数来表示")]),t._v(" "),a("p",[t._v("对比一下权威指南中的设计上的想法，这种底层实现也有了依据。")])]),t._v(" "),a("ul",[a("li",[t._v("undefined")])]),t._v(" "),a("p",[t._v("用未定义的值表示更深层次的“空值”。"),a("strong",[t._v("它是变量的一种取值，表明变量没有初始化。")])]),t._v(" "),a("p",[a("strong",[t._v("如果要查询的值返回undefined说明这个属性或元素不存在;如果函数返回undefined，则表示没有任何返回值。引用没有提供实参的函数形参值也只会得到undefined。")])]),t._v(" "),a("p",[t._v("undefined是预定义的全局变量（它和null不一样，"),a("strong",[t._v("它不是关键字")]),t._v("），它的值就是“未定义”")]),t._v(" "),a("p",[t._v("在ES5中undefined是只读的，用typeof会返回“undefined”，"),a("strong",[t._v("标明这个值是这个类型的唯一成员。")])]),t._v(" "),a("ul",[a("li",[t._v("null和undefined区别和联系")])]),t._v(" "),a("p",[t._v("他们都表示“值的空缺”，两者往往可以互换。")]),t._v(" "),a("p",[t._v("判断相等运算符“"),a("code",[t._v("==")]),t._v("”认为他们是相等的(是"),a("a",{attrs:{href:"http://www.ecma-international.org/ecma-262/5.1/#sec-11.9.3",target:"_blank",rel:"noopener noreferrer"}},[t._v("规范第2条规定的结果"),a("OutboundLink")],1),t._v("规定的结果)，“"),a("code",[t._v("===")]),t._v("”认为他们是不等的。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://giriawsh-bucket.oss-cn-beijing.aliyuncs.com/img/20200916181522.png",alt:"image-20200916181522355"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"https://giriawsh-bucket.oss-cn-beijing.aliyuncs.com/img/20200916181701.png",alt:"image-20200916181701453"}})]),t._v(" "),a("p",[t._v("两者的布尔值都为false")]),t._v(" "),a("p",[t._v("都不包含任何属性和方法，使用“.”和“[]”来存取两个值的成员或方法都会产生一个类型错误。")]),t._v(" "),a("p",[t._v("原书中有这样一段话（不清楚是否代表作者本人的立场）：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://giriawsh-bucket.oss-cn-beijing.aliyuncs.com/img/20200916181906.png",alt:"image-20200916181906059"}})]),t._v(" "),a("p",[a("strong",[t._v("因此在赋值上更倾向于选择null。")])]),t._v(" "),a("blockquote",[a("p",[t._v("其他历史原因上的设计和区别可以查看："),a("a",{attrs:{href:"https://www.ruanyifeng.com/blog/2014/03/undefined-vs-null.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("阮一峰——undefined与null的区别"),a("OutboundLink")],1)]),t._v(" "),a("p",[t._v('提到了首先，null像在Java里一样，被当成一个对象。Brendan Eich觉得表示"无"的值最好不是对象。需要引入一个单独的值。')]),t._v(" "),a("p",[t._v("其次，在早期JavaScript的最初版本没有包括错误处理机制，发生数据类型不匹配时，往往是自动转换类型或者默默地失败。Brendan Eich觉得，如果null自动转为0，很不容易发现错误。")]),t._v(" "),a("p",[t._v("因此，Brendan Eich又设计了一个undefined。")])]),t._v(" "),a("h2",{attrs:{id:"_3-全局对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_3-全局对象"}},[t._v("#")]),t._v(" 3. 全局对象")]),t._v(" "),a("p",[a("strong",[t._v("Global Object （全局对象, global对象）")])]),t._v(" "),a("p",[t._v("①JavaScript 中有一个特殊的对象，称为全局对象（Global Object），它及其所有属性都可以在程序的任何地方访问，即全局变量。")]),t._v(" "),a("p",[t._v("② 全局对象是预定义的对象，作为 JavaScript 的全局函数和全局属性的占位符。通过使用全局对象，可以访问所有其他所有预定义的对象、函数和属性。全局对象不是任何对象的属性，所以它没有名称。")]),t._v(" "),a("p",[t._v("③ **在顶层 JavaScript 代码中，可以用关键字 this 引用全局对象。**但通常不必用这种方式引用全局对象，因为全局对象是作用域链的头，这意味着所有非限定性的变量和函数名都会作为该对象的属性来查询。例如，当JavaScript 代码引用 parseInt() 函数时，它引用的是全局对象的 parseInt 属性。全局对象是作用域链的头，"),a("strong",[t._v("还意味着在顶层 JavaScript 代码中声明的所有变量，都将成为全局对象的属性。")])]),t._v(" "),a("p",[t._v("④ "),a("strong",[t._v("全局对象只是一个对象，而不是类。既没有构造函数，也无法用new实例化一个新的全局对象。")])]),t._v(" "),a("p",[t._v("⑤ 实际上，ECMAScript 标准没有规定全局对象的类型，"),a("strong",[t._v("而在客户端 JavaScript 中，全局对象就是 Window 对象，表示允许 JavaScript 代码的 Web 浏览器窗口。浏览器把全局对象作为window对象的一部分实现了，因此，所有的全局属性和函数都是window对象的属性和方法。")])]),t._v(" "),a("p",[a("strong",[t._v("通俗化理解：")])]),t._v(" "),a("p",[t._v("⑥ 《JavaScript高级程序设计》中谈到，global对象可以说是ECMAScript中最特别的一个对象了，因为不管你从什么角度上看，这个对象都是不存在的。从某种意义上讲，它是一个终极的“兜底儿对象”，换句话说呢，**就是不属于任何其他对象的属性和方法，最终都是它的属性和方法。**我理解为，这个global对象呢，就是整个JS的“老祖宗”，找不到归属的那些“子子孙孙”都可以到它这里来认祖归宗。所有在全局作用域中定义的属性和函数，都是global对象的属性和方法，比如isNaN()、parseInt()以及parseFloat()等，实际都是它的方法；还有就是常见的一些特殊值，如：NaN、undefined等都是它的属性，以及一些构造函数Object、Array等也都是它的方法。")]),t._v(" "),a("p",[t._v("总之，记住一点：global对象就是“老祖宗”，所有找不到归属的就都是它的。")]),t._v(" "),a("p",[t._v("当JS解释器启动（或者任何Web浏览器加载新页面的时候），它将创建一个新的全局对象，并给它一组定义的初始属性：")]),t._v(" "),a("ul",[a("li",[t._v("全局属性：比如undefined,Inifinity, NaN")]),t._v(" "),a("li",[t._v("全局函数：比如isNaN(),parseInt(),eval()")]),t._v(" "),a("li",[t._v("构造函数：比如Date(),RegExp(),String(),Object(),Array()")]),t._v(" "),a("li",[t._v("全局对象：比如Math和JSON")])]),t._v(" "),a("p",[t._v("从程序员角度考虑，正是因为全局对象的存在，使得特殊方法、属性初始化透明化了，完全不需要我们操心。而且也归属了所有的方法和对象。")]),t._v(" "),a("p",[t._v("全局对象的初始属性不是保留字，但是应该当做保留字（别取一些奇怪的名字就OK）")]),t._v(" "),a("p",[t._v("如第三点所提，可以使用this来使用全局对象。在客户端JS中，在其表示的浏览器窗口中的所有JS代码中，Window对象充当了全局对象。这个全局Window对象有一个window引用其自身，可以代替this来引用全局对象。")]),t._v(" "),a("p",[t._v("可以说，当初次创建的时候，全局对象定义了JS中所有的预定义的全局值（即上面列出的基本属性）。这个特殊对象同样包含了为程序定义的全局值。如果一个代码生命了一个全局变量，这个全局变量就是全局对象的一个属性。")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("var a = 0;//a其实就是挂靠在我们看不见的全局对象global下的一个属性\nvar global = this;\nthis.a // => 0\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("h2",{attrs:{id:"_4-包装对象-临时对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_4-包装对象-临时对象"}},[t._v("#")]),t._v(" 4. 包装对象（临时对象）")]),t._v(" "),a("p",[t._v("JS对象是一种复合值：它是属性或已命名值的集合。通过“.”来引用属性值。")]),t._v(" "),a("p",[t._v("当属性是一个函数时，称其为"),a("strong",[t._v("方法")]),t._v("，通过o.m()来调用o中的方法")]),t._v(" "),a("p",[t._v("在字符串中可以看到字符串也同样具有属性（.length）和方法（.substring()等），这是为什么？")]),t._v(" "),a("ul",[a("li",[t._v("因为只要引用了s的属性，"),a("strong",[t._v("JS就会将字符串值通过调用new String(s)的方式转换成对象")]),t._v("，这个对象继承了字符串的方法，并用来处理属性的引用。")]),t._v(" "),a("li",[t._v("一旦属性引用结束，这个新创建的对象就会销毁（虽然表面上没有这层实现）")])]),t._v(" "),a("p",[t._v("同理，数字和布尔值也有各自的方法（"),a("strong",[t._v("利用Number()和Boolean()构造函数创建一个临时对象")]),t._v("），这些方法的调用都是来自于临时对象。")]),t._v(" "),a("p",[t._v("null和undefined没有包装对象，访问它们的属性会造成一个类型错误。")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"giria"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\ns"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("len "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//创建了一个临时字符串对象，并给len属性赋值，随即销毁")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("len"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => undefined")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("说明，在读取字符串、数字、布尔值的属性或方法时，表现地像对象一样（可以访问一些属性调用一些方法）。但是如果试图给属性赋值，则会被忽略。"),a("strong",[t._v("修改知识发生在临时对象身上，而这个临时对象并未继续保存下来。")])]),t._v(" "),a("blockquote",[a("p",[t._v("包装对象：存取字符串、数字、布尔值的属性时创建的临时对象")]),t._v(" "),a("p",[t._v("由于字符串、数字、布尔值的属性都是只读的，不能给他们新属性，需要明白它们是有别于对象的。")])]),t._v(" "),a("p",[t._v("需要注意的是，我们可以通过String() Number() Boolean()构造函数来"),a("strong",[t._v("显示创建包装对象")]),t._v("，他们的值和属性可以被添加和保存。（因为无自动销毁过程）")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://giriawsh-bucket.oss-cn-beijing.aliyuncs.com/img/20200916192643.png",alt:"image-20200916192643128"}})]),t._v(" "),a("p",[t._v('"'),a("code",[t._v("==")]),t._v('"运算符将原始值和其包装对象视为相等，“'),a("code",[t._v("===")]),t._v("”将他们视为不等，使用typeof也可以看出区别；")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" s "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"giria"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" a "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => true")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("===")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => false")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("s"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => string")]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("a"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => object")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("h2",{attrs:{id:"_5-不可变的原始值和可变的对象引用"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_5-不可变的原始值和可变的对象引用"}},[t._v("#")]),t._v(" 5. 不可变的原始值和可变的对象引用")]),t._v(" "),a("blockquote",[a("p",[t._v("原始值（即原始类型）：包括数字、字符串、布尔值、null、undefined")]),t._v(" "),a("p",[t._v("对象：包括数组和函数")])]),t._v(" "),a("h3",{attrs:{id:"原始值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#原始值"}},[t._v("#")]),t._v(" 原始值")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("原始值是不可改变的，任何方法都无法改变一个原始值。")]),t._v("（字符串方法实际返回的是一个新的字符串值）")])]),t._v(" "),a("li",[a("p",[t._v("原始值的比较是"),a("strong",[t._v("值的比较")]),t._v("：只有它们的值相等时才相等")]),t._v(" "),a("ul",[a("li",[t._v("没有方法比较null和undefined")]),t._v(" "),a("li",[t._v("如果比较两个单独的字符串，当且仅当它们的长度相等并且每个索引值的字符都相等时，JS才认为它们相等")])])])]),t._v(" "),a("h3",{attrs:{id:"对象"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象"}},[t._v("#")]),t._v(" 对象")]),t._v(" "),a("ul",[a("li",[t._v("对象是可变的，它们的值可以被修改")]),t._v(" "),a("li",[t._v("对象的比较并非值的比较\n"),a("ul",[a("li",[t._v("两个对象包含同样的属性以及相同的值，它们也是不相等的。")]),t._v(" "),a("li",[t._v("对象值都是引用，它们的比较均是引用的比较：当且仅当它们引用同一个基对象时它们才相等")])])])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://giriawsh-bucket.oss-cn-beijing.aliyuncs.com/img/20200916193642.png",alt:"image-20200916193642148"}})]),t._v(" "),a("p",[t._v("如果想要得到一个对象或数组的副本，必须进行显式复制对象的每个属性或者数组的每个元素（浅拷贝，如果涉及复杂复制则需要深拷贝）")]),t._v(" "),a("p",[t._v("同样地，如果想要比较两个单独的对象或者数组，则必须比较它们的属性或元素。")]),t._v(" "),a("h2",{attrs:{id:"_6-类型转换-重要"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-类型转换-重要"}},[t._v("#")]),t._v(" 6. 类型转换（重要）")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://giriawsh-bucket.oss-cn-beijing.aliyuncs.com/img/20200916235551.png",alt:"image-20200916235551517"}})]),t._v(" "),a("p",[t._v("所有原始值转换成字符串很好理解（对象转换后面会提到），转换为数字比较微妙。")]),t._v(" "),a("ul",[a("li",[t._v("以数字表示的字符串可以直接转换成数字，也允许开始和结尾处带有空格")]),t._v(" "),a("li",[t._v("在开始和结尾处的任意非空格字符都不会被当成数字直接量的一部分，进而造成字符串转换数字的结果为NaN")]),t._v(" "),a("li",[t._v('true => 1   false => 0  ""  => 0')])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://giriawsh-bucket.oss-cn-beijing.aliyuncs.com/img/20200917000033.png",alt:"image-20200917000033034"}})]),t._v(" "),a("p",[t._v("原始值到对象的转换：调用String(), Number(), Boolean()构造函数，转换为各自的包装对象")]),t._v(" "),a("p",[t._v("null和undefined用在期望是一个对象的地方都会造成一个类型错误(TypeError)，但是使用Object()函数，则会简单地返回一个新创建的空对象。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://giriawsh-bucket.oss-cn-beijing.aliyuncs.com/img/20200917001628.png",alt:"image-20200917001628502"}})]),t._v(" "),a("h3",{attrs:{id:"_6-1-转换和相等性"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-1-转换和相等性"}},[t._v("#")]),t._v(" 6.1 转换和相等性")]),t._v(" "),a("p",[t._v("一个值转为另一个值不意味着两个值相等。if语句会将 undefined转为false，但“==”运算符从不试图将操作数转换为布尔值。")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://giriawsh-bucket.oss-cn-beijing.aliyuncs.com/img/20200917000344.png",alt:"image-20200917000344299"}})]),t._v(" "),a("h3",{attrs:{id:"_6-2-显式类型转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-2-显式类型转换"}},[t._v("#")]),t._v(" 6.2 显式类型转换")]),t._v(" "),a("p",[t._v("做显示类型转换最简单的方法就是使用Boolean(),Number(),String(),Object()函数。（当不使用new调用时，它们会作为类型转换函数，按照上表进行转换）")]),t._v(" "),a("p",[t._v("注意！！除了null或undefined外任何值都有toString()方法（执行结果通常和String()一致）")]),t._v(" "),a("h4",{attrs:{id:"隐式类型转换"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#隐式类型转换"}},[t._v("#")]),t._v(" 隐式类型转换")]),t._v(" "),a("ul",[a("li",[a("p",[t._v("+的一个操作数是字符串，会把另一个操作数转换为字符串")])]),t._v(" "),a("li",[a("p",[t._v("一元运算符+将操作数转换为数字。")])]),t._v(" "),a("li",[a("p",[t._v("！将其运算数转换为布尔值并取反")])])]),t._v(" "),a("p",[t._v("所以会经常遇到这样的用法：")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://giriawsh-bucket.oss-cn-beijing.aliyuncs.com/img/20200917001812.png",alt:"image-20200917001811957"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"https://giriawsh-bucket.oss-cn-beijing.aliyuncs.com/img/20200917001822.png",alt:"image-20200917001822151"}})]),t._v(" "),a("h4",{attrs:{id:"tostring"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tostring"}},[t._v("#")]),t._v(" toString")]),t._v(" "),a("p",[t._v("Number类定义的toString（）可接受表示转换基数的可选参数，默认为十进制")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://giriawsh-bucket.oss-cn-beijing.aliyuncs.com/img/20200917002225.png",alt:"image-20200917002225186"}})]),t._v(" "),a("p",[t._v("经过实践，带参数转换只有数字类可以正确使用，其他都只会返回它的toString()无参数结果。")]),t._v(" "),a("h4",{attrs:{id:"tofixed"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tofixed"}},[t._v("#")]),t._v(" toFixed()")]),t._v(" "),a("p",[t._v("Number类，根据小数点后的指定位数将数字转换成字符串，从不使用指数计数法。")]),t._v(" "),a("h4",{attrs:{id:"toexponential"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#toexponential"}},[t._v("#")]),t._v(" toExponential()")]),t._v(" "),a("p",[t._v("Number类，使用指数计数法将数字转为指数形式的字符串，其中小数点前只有一位，小数点后的位数由参数指定（有效位数=指定位数+1）")]),t._v(" "),a("h4",{attrs:{id:"toprecision"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#toprecision"}},[t._v("#")]),t._v(" toPrecision()")]),t._v(" "),a("p",[t._v("Number类，根据指定的有效数字位数将数字转换成字符串。如果有效数字位数少于数字整数部分的位数，则转换成指数形式。")]),t._v(" "),a("p",[t._v("所有三个方法都会适当地进行四舍五入或填充0.")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://giriawsh-bucket.oss-cn-beijing.aliyuncs.com/img/20200917135234.png",alt:"image-20200917135227698"}})]),t._v(" "),a("h4",{attrs:{id:"number"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#number"}},[t._v("#")]),t._v(" Number()")]),t._v(" "),a("p",[t._v("传入一个字符串，它会试图将其转换成一个整数或者浮点数，但是只能基于十进制进行转换，且不能出现非法的尾随字符。")]),t._v(" "),a("h4",{attrs:{id:"parseint"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parseint"}},[t._v("#")]),t._v(" parseInt()")]),t._v(" "),a("p",[t._v("全局函数，不从属于任何类的方法。只解析整数。如果前缀是0x或0X，将其解析为十六进制数。可以接受第二个可选参数，指定数字转换的基数，合法的取值范围是2~36.")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://giriawsh-bucket.oss-cn-beijing.aliyuncs.com/img/20200917135843.png",alt:"image-20200917135843297"}})]),t._v(" "),a("p",[t._v("经过试验，如果非法（基数不在2~36范围内，或者转换基数小于所给转换值），将会返回NaN")]),t._v(" "),a("h4",{attrs:{id:"parsefloat"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parsefloat"}},[t._v("#")]),t._v(" parseFloat()")]),t._v(" "),a("p",[t._v("全局函数，不从属于任何类的方法。解析整数和浮点数。")]),t._v(" "),a("p",[t._v("parseInt()和parseFloat()都会跳过任意数量的前导空格，并忽略后面非字符内容。")]),t._v(" "),a("p",[t._v("但是如果第一个非空格字符是非法数字直接量(如字符串等)，将会返回NaN")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://giriawsh-bucket.oss-cn-beijing.aliyuncs.com/img/20200917135709.png",alt:"image-20200917135709884"}})]),t._v(" "),a("h3",{attrs:{id:"_6-3-对象转换为原始值"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#_6-3-对象转换为原始值"}},[t._v("#")]),t._v(" 6.3 对象转换为原始值")]),t._v(" "),a("p",[t._v("对象到布尔值：所有对象都转换成true，对于包装对象也是如此。")]),t._v(" "),a("p",[t._v("对象到字符串，对象到数字是通过调用待转换对象的一个方法来完成的。")]),t._v(" "),a("p",[t._v("下文提到的转换规则只适用于本地对象（native object），宿主对象（如由web浏览器定义的对象）根据各自的算法可以转换。")]),t._v(" "),a("h4",{attrs:{id:"tostring-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tostring-2"}},[t._v("#")]),t._v(" toString()")]),t._v(" "),a("p",[t._v("作用：返回一个反映这个对象的字符串。")]),t._v(" "),a("p",[t._v("默认的toString()方法会返回一个一般的值：")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('({x:1, y:2}).toString()// => "[object Object]"\n')])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("很多类定义了特定版本的toString()方法。")]),t._v(" "),a("ul",[a("li",[t._v("数组类：将每个数组元素转换成一个字符串，并在元素之间添加逗号后合并结果字符串")])]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('[1,2,3].toString()// => "1,2,3"\n["aaa", 1, {x:1, y:2}, [1,2,3]].toString() // => "aaa,1,[object Object],1,2,3"\n')])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("ul",[a("li",[t._v("函数类:返回这个函数的实现定义的表示方式。（通常是将用户定义的函数转换为JS源代码字符串）")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://giriawsh-bucket.oss-cn-beijing.aliyuncs.com/img/20200917143455.png",alt:"image-20200917143455672"}})]),t._v(" "),a("ul",[a("li",[t._v("日期类：返回一个可读的（可被JS解析的）日期和时间字符串.注意下月份是从0开始的。")])]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('new Date(2020, 8, 7).toString() // => "Mon Sep 07 2020 00:00:00 GMT+0800 (中国标准时间)"\n')])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("ul",[a("li",[t._v("RegExp类：将RegExp对象转换为表示正则表达式直接量的字符串")])]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v('/\\d+/g.toString() // => "/\\d+/g"\n')])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("h4",{attrs:{id:"valueof"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#valueof"}},[t._v("#")]),t._v(" valueOf()")]),t._v(" "),a("ul",[a("li",[t._v("如果存在任意原始值，默认将对象转换为表示它的原始值")])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("111")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => 111")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"aaaa"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// => "aaaa"')]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("ul",[a("li",[t._v("对象是复合值，而且大多数对象无法真正表示为一个原始值，这个方法简单地返回对象本身。（例如数组、函数和正则表达式）")])]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"aaa"')]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("x"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" y"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// => [1, 2, 3, "aaa", {…}]0: 11: 22: 33: "aaa"4: {x: 1, y: 2}length: 5__proto__: Array(0)')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("function")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("x")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("return")]),t._v(" x"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => ƒ (x){return x;}")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/\\d+/g")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => /\\d+/g")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br")])]),a("ul",[a("li",[t._v("日期类valueOf()方法会返回它的一个内部表示：1970年1月1日以来的毫秒数")])]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("(new Date(2020, 8, 17)).valueOf() // => 1600272000000\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("h4",{attrs:{id:"对象到字符串的转换过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象到字符串的转换过程"}},[t._v("#")]),t._v(" 对象到字符串的转换过程")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://giriawsh-bucket.oss-cn-beijing.aliyuncs.com/img/20200917144313.png",alt:"image-20200917144313522"}})]),t._v(" "),a("p",[a("img",{attrs:{src:"https://giriawsh-bucket.oss-cn-beijing.aliyuncs.com/img/20200917144339.png",alt:"image-20200917144338919"}})]),t._v(" "),a("h4",{attrs:{id:"对象到数字的转换过程"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#对象到数字的转换过程"}},[t._v("#")]),t._v(" 对象到数字的转换过程")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://giriawsh-bucket.oss-cn-beijing.aliyuncs.com/img/20200917144356.png",alt:"image-20200917144356358"}})]),t._v(" "),a("h5",{attrs:{id:"空数组转为数字"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#空数组转为数字"}},[t._v("#")]),t._v(" 空数组转为数字")]),t._v(" "),a("p",[t._v("解释了为什么空数组转换为数字=0：数组具有valueOf方法，并且返回一个对象而不是原始值（数字、字符串、布尔值、null、undefined），所以实际上调用的是toString()方法，空数组转换成空字符串（是一个原始值），然后转换为数字。")]),t._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[t._v("Number(([]).toString()) // => 0\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("h5",{attrs:{id:"和-运算符"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#和-运算符"}},[t._v("#")]),t._v(" +和"),a("code",[t._v("==")]),t._v("运算符")]),t._v(" "),a("p",[t._v("可以进行数学加法和字符串连接操作。如果它的其中一个操作数是对象，则JS使用特殊的方法将对象转换为原始值。")]),t._v(" "),a("p",[t._v("“==”相等运算符与此类似，如果将对象和一个原始值比较，则转换会遵照对象到原始值的转换方式进行")]),t._v(" "),a("p",[t._v("+和"),a("code",[t._v("==")]),t._v("运算符包含对日期对象转换的一种特殊情形。")]),t._v(" "),a("p",[t._v("**日期类是JS核心中唯一的预先定义类型。**它定义了有意义的向字符串和数字类型的转换。")]),t._v(" "),a("p",[a("strong",[t._v("对所有非日期的对象来说，对象到原始值的转换基本上是对象到数字的转换")]),t._v("（首先会调用valueOf），**日期对象则使用对象到字符串的转换模式。**然而这里的转换有些特殊：通过valueOf或者toString返回的原始值将被直接使用，而不会被强制转换为数字或字符串。")]),t._v(" "),a("p",[t._v("“<”，“!=”等关系运算符，也是如此，对任何非日期对象都会首先尝试调用valueOf，然后调用toString。不管得到的原始值是否直接使用，都不会进一步被转换为数字或字符串。")]),t._v(" "),a("p",[t._v("看起来很难理解，看实际的演示吧。")]),t._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" now "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("Date")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//+号将日期优先转换为字符串")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("now "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// => "string"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//-号将日期作为一般对象处理，优先调用valueOf转换为数字，其他符号亦复如是")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("now "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// => "number"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("now "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// => "number"')]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("now "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// => "number"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//==号对日期类优先转换为字符串调用toString")]),t._v("\nnow "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" now"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => false")]),t._v("\nnow "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("==")]),t._v(" now"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => true")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//-号优先转换为数字，再进行数字比较")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//书上说“>”将日期转换为数字，指的是在比较时now被转换成了数字（因为now-1因为减号已经是数字了），也是没有毛病的。")]),t._v("\nnow "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("now "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => true")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//+号优先转换为字符串，调用toString()方法")]),t._v("\nnow "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("now "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => false")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("typeof")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("now"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// => "string"')]),t._v("\nconsole"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("now"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => VM453:1 Thu Sep 17 2020 15:15:54 GMT+0800 (中国标准时间)")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("now"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("toString")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// => "Thu Sep 17 2020 15:15:54 GMT+0800 (中国标准时间)1"')]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("//<号会将字符串进行valueof的数字比较.但是，now+1的原始值经过一次转换后，不会再进一步被转换为数字或字符串，他们永不相等。")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("now"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("valueOf")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// => 1600326954798")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Thu Sep 17 2020 15:15:54 GMT+0800 (中国标准时间)1"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1600326954798")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"Thu Sep 17 2020 15:15:54 GMT+0800 (中国标准时间)1"')]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v(">")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1600326954798")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token boolean"}},[t._v("false")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br"),a("span",{staticClass:"line-number"},[t._v("26")]),a("br"),a("span",{staticClass:"line-number"},[t._v("27")]),a("br"),a("span",{staticClass:"line-number"},[t._v("28")]),a("br"),a("span",{staticClass:"line-number"},[t._v("29")]),a("br"),a("span",{staticClass:"line-number"},[t._v("30")]),a("br"),a("span",{staticClass:"line-number"},[t._v("31")]),a("br")])]),a("p",[a("strong",[t._v("总结来说：")])]),t._v(" "),a("ul",[a("li",[a("p",[a("code",[t._v("+,==,<,>,!=")]),t._v("等关系运算符（注意加号是特别的）")]),t._v(" "),a("ul",[a("li",[t._v("针对非日期对象：首先调用valueOf，然后调用toString")]),t._v(" "),a("li",[t._v("针对日期对象：首先调用toString，然后调用valueOf")]),t._v(" "),a("li",[t._v("且经过一次转换后，不会进一步转换为数字或字符串。")])])]),t._v(" "),a("li",[a("p",[t._v("其他运算符")]),t._v(" "),a("ul",[a("li",[t._v("优先调用valueOf，然后调用toString。")])])])]),t._v(" "),a("h2",{attrs:{id:"参考网站"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#参考网站"}},[t._v("#")]),t._v(" 参考网站")]),t._v(" "),a("p",[a("a",{attrs:{href:"https://blog.csdn.net/chenchunlin526/article/details/78908592",target:"_blank",rel:"noopener noreferrer"}},[t._v("JS/JavaScript中的概念区分：global对象、window对象、document对象"),a("OutboundLink")],1)])])}),[],!1,null,null,null);s.default=e.exports}}]);